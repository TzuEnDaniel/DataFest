datafest<=read.csv('questionposts.csv')
datafest<=read.csv('questionposts.csv')
datafest<-read.csv('questionposts.csv')
View(datafest)
install.packages("quanteda")
require(quantedda)
require(quanteda)
require(dplyr)
require(ggplot2)
pa_text<-filter(datafest,StateAbbr='PA')
pa_text<-filter(datafest,StateAbbr=='PA')
pa_corpus<-corpus(pa_text,text_field = 'PostText')
pa_corpus
head(docvars(pa_corpus))
summary(corpus_subset(pa_corpus,Createdutc %like% "2021-07-10"))
require(data.table)
summary(corpus_subset(pa_corpus,Createdutc %like% "2021-07-10"))
head(docvars(pa_corpus))
summary(corpus_subset(pa_corpus, CreatedUtc %like% "2021-07-10"))
pa_corpClean<-tokens(pa_corpus,remove_punct = TRUE,
remove_symbols = TRUE)
pa_coll<-textstat_collocations(pa_corpClean,size=2,min_count=25)
pa_corpClean<-tokens(pa_corpus,remove_punct = TRUE,
remove_symbols = TRUE)
View(pa_corpClean)
pa_coll<-textstat_collocations(pa_corpClean,size=2,min_count=25,tolower(pa_corpClean))
require(quanteda)
pa_coll<-textstat_collocations(pa_corpClean,size=2,min_count=25,tolower(pa_corpClean))
require(qunateda.textstats)
require(quanteda.textstats)
install.packages("quanteda.textstats")
require(quanteda.textstats)
pa_coll<-textstat_collocations(pa_corpClean,size=2,min_count=25,tolower(pa_corpClean))
pa_coll<-textstat_collocations(pa_corpClean,size=2,min_count=25,
tolower())
View(pa_corpClean)
pa_coll<-textstat_collocations(pa_corpClean,size=2,min_count=25,
tolower(text2))
pa_coll<-textstat_collocations(pa_corpClean,size=2,min_count=25,
tolower(pa_corpClean$text2))
install.packages("textplot")
require(textplot)
textplot_wordcloud(pa_text,min_count=50,
color=RColorBrewer::brewer.pal(8,'Dark2'))
install.packages("quanteda.textplots")
require(quanteda.textplots)
textplot_wordcloud(pa_text,min_count=50,
color=RColorBrewer::brewer.pal(8,'Dark2'))
View(pa_text)
dfm(pa_text$PostText, remove_punct = TRUE)
textplot_wordcloud(pa_corpus,min_count=50,
color=RColorBrewer::brewer.pal(8,'Dark2'))
View(pa_corpClean)
textplot_wordcloud(pa_corClean,min_count=50,
color=RColorBrewer::brewer.pal(8,'Dark2'))
textplot_wordcloud(pa_corpClean,min_count=50,
color=RColorBrewer::brewer.pal(8,'Dark2'))
library(quanteda)
library(quanteda.textstats)
library(quanteda.textplots)
library(quanteda.textmodels)
library(dplyr)
install.packages("quanteda.textmodels")
datafest <- read.csv("questionposts.csv")
names(datafest)
pa_text <- filter(datafest, StateAbbr == "PA")
pa_corpus <- corpus(pa_text, text_field = "PostText")
head(docvars(pa_corpus))
summary(corpus_subset(pa_corpus, CreatedUtc %like% "2021-07-10"))
jul10 <- corpus_subset(pa_corpus, CreatedUtc %like% "2021-07-10")
pa_corpClean <- tokens(pa_corpus, remove_punct = TRUE, remove_symbols = TRUE)
pa_coll <- textstat_collocations(pa_corpClean, size=2, min_count = 25, tolower = TRUE)
pa_custody <- kwic(pa_corpClean, pattern = "custody", window = 5)
pa_courtOrder <- kwic(pa_corpClean, phrase("court order"), window = 5)
pa_dfm <- tokens(pa_corpus, remove_symbols = TRUE, remove_punct = TRUE) %>%
tokens_remove(stopwords("en")) %>%
dfm()
View(pa_dfm)
pa_dfm$Id
docvars(pa_dfm, field = "Id")
dfm_subset(pa_dfm, StateAbbr == "PA")
dfm_subset(pa_dfm, Id < 270599)
dfm_subset(pa_dfm, CreatedUtc %like% "2021-07-10")
dfm_state <- dfm_group(dfm, groups = StateAbbr)
topfeatures(pa_dfm, 50)
textplot_wordcloud(pa_dfm, min_count = 50,
color = RColorBrewer::brewer.pal(8, "Dark2"))
textplot_wordcloud(pa_dfm, min_count = 50,
color = RColorBrewer::brewer.pal(8, "Dark2"))
textplot_wordcloud(pa_dfm, min_count = 50,
color = RColorBrewer::brewer.pal(8, "Dark2"))
View(datafest)
dfm_state <- dfm_group(pa_dfm, groups = StateAbbr)
View(datafest)
View(dfm_state)
topfeatures(pa_dfm, 50)
textplot_wordcloud(pa_dfm, min_count = 50,
color = RColorBrewer::brewer.pal(8, "Dark2"))
pa_dfm <- dfm_remove(pa_dfm, pattern = c("s", "t"))
features_dfm <- textstat_frequency(pa_dfm, n = 50)
features_dfm <- textstat_frequency(pa_dfm, n = 50)
pa_dfm <- dfm_remove(pa_dfm, pattern = c("s", "t"))
features_dfm <- textstat_frequency(pa_dfm, n = 50)
# Sort by reverse frequency order
features_dfm$feature <- with(features_dfm, reorder(feature, -frequency))
ggplot(features_dfm, aes(x = feature, y = frequency)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(pa_dfm)
cateData <- read.csv('questions.csv')
all_cat<-corpus(cateData,text_field = 'Category')
cat_dfm <- tokens(all_cat, remove_symbols = TRUE, remove_punct = TRUE) %>%
tokens_remove(stopwords("en")) %>%
dfm()
textplot_wordcloud(cat_dfm, min_count = 50,
color = RColorBrewer::brewer.pal(8, "Dark2"))
textplot_wordcloud(cat_dfm, min_count = 50,
color = RColorBrewer::brewer.pal(8, "Dark2"),
labelsize = 1.5,)
textplot_wordcloud(cat_dfm, min_count = 50,
color = RColorBrewer::brewer.pal(8, "Dark2"),
labelsize = 5,)
features_dfm <- textstat_frequency(cat_dfm, n = 50)
ggplot(features_dfm, aes(x = feature, y = frequency)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Sort by reverse frequency order
features_dfm$feature <- with(features_dfm, reorder(feature, -frequency))
ggplot(features_dfm, aes(x = feature, y = frequency)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
View(cateData)
library(tidyverse)
tibble_cat<-as.tibble(cateData)
tibble_cat<-as_tibble(cateData)
View(tibble_cat)
tibble_cat<-tibble_cat%>%
separate(AskedOnUtc,into = c('Date','Time'),sep='')
tibble_cat<-as_tibble(cateData)
tibble_cat<-tibble_cat%>%
separate(AskedOnUtc,into = c('Date','Time'),sep=11)
tibble_cat<-tibble_cat%>%
separate(Date,into = c('Year','Month','Day'),sep='-')
ggplot(tibble_cat,
aes(x = Month)) +
geom_histogram()
df_cat<-as.data.frame(tibble_cat)
ggplot(df_cat,
aes(x = Month)) +
geom_histogram()
View(df_cat)
ggplot(df_cat,
aes(x = Month)) +
geom_bar()
#' ## Data import and management
#'
#### First, install and load the tidyverse package which includes a set of packages that work together for
#### data manipulation (i.e. dplyr, purr, and tidyr) and visualization (importantly ggplot2).
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
data("diamonds")
#See that we've added "diamonds" to our global environment. Once we've loaded
#the diamonds dataset, we can view it using View:
View(diamonds)
# Intermediate gg-Plotting -----
##Graphing the mean price of diamonds grouped by clarity and cut
diamonds2 %>%
group_by(clarity, cut) %>%
summarize(m = mean(price)) %>%
ggplot(aes(x = clarity, y = m, group = cut, color = cut)) +
geom_point() +
geom_line() +
facet_wrap(~cut) +
labs(x= "my x-axis label here",
y = "my y-axis label here",
title = "The title of my Graph here") +
theme_classic()
diamonds2 <- diamonds %>%
group_by(clarity, cut) %>%
sample_frac(size = 0.1) %>%
ungroup()
## 1. The Data Layer -----
#### Specifies the data set to be plotted.
diamonds2 %>%
ggplot(data = diamonds2)
#### Can also be piped in!
diamonds2 %>%
ggplot()
## 2. The aesthetics (aes) layer -----
#### Specifies how we want to represent the variables in the plot.
p <- ggplot(data = diamonds2,
aes(x = carat,
y = price))
p
str(diamonds)
summary(diamonds)
diamonds %>% filter(cut == "Fair")
diamonds %>% filter(!cut == "Fair")
diamonds %>% select(cut, color)
#Create new variables with the mutate() functions. Often, this function will have
#other functions nested within
diamonds %>%
mutate(m = mean(price),     # calculates the mean price
sd = sd(price),      # calculates standard deviation
med = median(price)) # calculates the median price
diamonds2 <- diamonds %>%
group_by(clarity, cut) %>%
sample_frac(size = 0.1) %>%
ungroup()
## 1. The Data Layer -----
#### Specifies the data set to be plotted.
diamonds2 %>%
ggplot(data = diamonds2)
#### Can also be piped in!
diamonds2 %>%
ggplot()
## 2. The aesthetics (aes) layer -----
#### Specifies how we want to represent the variables in the plot.
p <- ggplot(data = diamonds2,
aes(x = carat,
y = price))
p
## 3. The geometry (geom) layer -----
#### Identifies how the data points will be represented.
p <- p + geom_point()
## 4. The facets layer -----
#### Divides the plot into subplots based on one or more discrete variables.
p <- p + facet_wrap(~ cut)
p
## 5. The statistics (stat) layer -----
#### Can be used to create and overlay subplots.
p <- p + stat_smooth(method = "lm")
# Intermediate gg-Plotting -----
##Graphing the mean price of diamonds grouped by clarity and cut
diamonds2 %>%
group_by(clarity, cut) %>%
summarize(m = mean(price)) %>%
ggplot(aes(x = clarity, y = m, group = cut, color = cut)) +
geom_point() +
geom_line() +
facet_wrap(~cut) +
labs(x= "my x-axis label here",
y = "my y-axis label here",
title = "The title of my Graph here") +
theme_classic()
## 1. Aesthetics -----
#### For detailed information on aesthetics in ggplot:
vignette("ggplot2-specs")
### Colour Palettes ------
#### Create a ggplot object where the price variable is plotted against carat as a scatterplot
#### and cut defined by the colour aesthetic.
p <- ggplot(diamonds2,
aes(x = carat,
y = price,
colour = cut)) +
geom_point()
#### Generate the plot with default ggplot2 colors.
p
### Modifying points -----
#### Generate the same ggplot object as above but without assigning a geometry
p <- ggplot(diamonds2,
aes(x = carat,
y = price,
color = cut))
## 2. Geometries -----
### One Variable ----
#### For discrete variables we can draw a barplot with geom_bar() to see how many times each
#### value is observed.
ggplot(diamonds2,
aes(x = cut)) +
geom_bar()
#### Continuous variables have a similar function, geom_histogram(), that "bins" values to see the
#### spread of the data.
ggplot(diamonds2,
aes(x = price)) +
geom_histogram()
str(df_cat)
View(pa_text)
df_cat$Month<-as.numeric(df_cat$Month)
ggplot(df_cat,
aes(x = Month)) +
geom_bar()
ggplot(df_cat,
aes(x = Month)) +
geom_histogram()
#### We can also overlay geometries to see more information.  For instance, we can add a smoothed
#### version of the histogram over the histogram with geom_density() by appending the function after
#### geom_histogram().
ggplot(diamonds,
aes(x = price,
y = ..density..)) +
geom_histogram() +
geom_density()
ggplot(df_cat,
aes(x =reorder(Month) )) +
geom_histogram()
ggplot(df_cat,
aes(x =Month )) +
geom_histogram()
ggplot(df_cat,
aes(x =-Month )) +
geom_histogram()
ggplot(df_cat,
aes(x =desc(Month) )) +
geom_histogram()
ggplot(df_cat,
aes(x =Month )) +
geom_histogram()
df_cat$Month<-as.numeric(df_cat$Month)
ggplot(df_cat,
aes(x =Month )) +
geom_histogram()
View(df_cat)
ggplot(df, aes(x = reorder(x_variable, -Month), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = reorder(x_variable, -Month), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = reorder(month, -Month), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = reorder(Month, -Month), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = reorder(Month), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = reorder(-Month), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = reorder(-Month,count), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = reorder(Month,-perc), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
df_catCount<-df_cat%>%
group_by(Month)%>%
summarise(count(=n))
df_catCount<-df_cat%>%
group_by(Month)%>%
summarise(count=n)
df_catCount<-df_cat%>%
group_by(Month)%>%
summarise(n=count)
df_catCount<-df_cat%>%
group_by(Month)%>%
summarise(count=n())
View(df_catCount)
ggplot(df_catCount, aes(x = reorder(Month,-count), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = Month, fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
df_cat$Month<-factor(df_cat$Month)
ggplot(df_cat, aes(x = Month, fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
df_catCount<-df_cat%>%
group_by(Month,Category)%>%
summarise(count=n())
View(df_cat)
View(df_catCount)
df_catCount %>%
ggplot( aes(x=Month, y=count, group=Category, color=Category)) +
geom_line()
ggplot(df_catCount, aes(y = reorder(Month,-count), fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_catCount, aes(reorder(Month,-count),count, fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(y = Month), fill  = Category) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = Month), fill  = Category) + geom_bar(stat='count') + ggtitle("Graph")
ggplot(df_cat, aes(x = Month, fill  = Category)) + geom_bar(stat='count') + ggtitle("Graph")
df_catCount %>%
ggplot( aes(x=Month, y=count, group=Category, color=Category)) +
geom_line()
ggplot(df_cat, aes(x = Month, fill  = Category)) + geom_bar(stat='count') + ggtitle("Month Frequency Plot")
df_catCount %>%
ggplot( aes(x=Month, y=count, group=Category, color=Category)) +
geom_line()+
ggtitle('Category line chart')
View(datafest)
df_catCountPerMonth<-df_cat%>%
group_by(Month,Category)%>%
summarise(count=n())
View(df_cat)
df_catCountPerState<-df_cat%>%
group_by(StateAbbr,Category)%>%
summarise(count=n())
ggplot(df_cat, aes(x = State, fill  = Category)) +
geom_bar(stat='count') +
ggtitle("Month Frequency Plot Per State")
ggplot(df_cat, aes(x = StateAbbr, fill  = Category)) +
geom_bar(stat='count') +
ggtitle("Month Frequency Plot Per State")
ggplot(df_cat, aes(x = StateAbbr, fill  = Category)) +
geom_bar(stat='count') +
ggtitle("Frequency Plot Per State")
View(tibble_cat)
tibble_catDate<-tibble_cat%>%
unite(NewDate,Year,Month,sep='-')
View(tibble_cat)
View(tibble_catDate)
GroupCate<-tibble_catDate%>%
group_by(NewDate,Category)%>%
summarise(count=n())
View(GroupCate)
write.csv(GroupCate, "PC:\\Users\\CloudMosa\\Desktop\\Penn state\\DataFest\\data\\\GroupCate.csv", row.names=FALSE)
write.csv(GroupCate, "Users\\CloudMosa\\Desktop\\Penn state\\DataFest\\data\\\GroupCate.csv", row.names=FALSE)
GroupCate<-as.data.frame(GroupCate)
write.csv(GroupCate, "Users\\CloudMosa\\Desktop\\Penn state\\DataFest\\data\\\GroupCate.csv", row.names=FALSE)
write.csv(GroupCate, "Users\\CloudMosa\\Desktop\\Penn state\\DataFest\\data\\GroupCate.csv", row.names=FALSE)
write.csv(GroupCate,"Users\\CloudMosa\\Desktop\\Penn state\\DataFest\\data\\GroupCate.csv", row.names=FALSE)
GroupCate<-as.data.frame(GroupCate)
write.csv(GroupCate,"Users\\CloudMosa\\Desktop\\Penn state\\DataFest\\data\\GroupCate.csv", row.names=FALSE)
write.csv(GroupCate,"Users\\CloudMosa\\Desktop\\Penn state\\DataFest\\data\\Group.csv", row.names=FALSE)
write.csv(GroupCate,".\\GroupCate.csv", row.names=FALSE)
View(GroupCate)
str(GroupCate)
GroupYear<-tibble_cat%>%
group_by(Year,Category)%>%
summarise(count=n())
View(GroupYear)
df_catCountPerMonth %>%
ggplot( aes(x=Month, y=count, group=Category, color=Category)) +
geom_line()+
ggtitle('Category line chart')
View(GroupYear)
GroupYear %>%
ggplot( aes(x=Month, y=count, group=Category, color=Category)) +
geom_line()+
ggtitle('Category line chart')
GroupYear %>%
ggplot( aes(x=Year, y=count, group=Category, color=Category)) +
geom_line()+
ggtitle('Category line chart')
View(GroupYear)
write.csv(GroupYear,".\\GroupYear.csv", row.names=FALSE)
GroupYear<-read.csv('GroupYear.csv')
View(GroupYear)
GroupYear%>%
arrange(desc(Year,count))
GroupYear%>%
arrange(desc(Year),desc(count))
GroupYearDesc<-GroupYear%>%
arrange(desc(Year),desc(count))
View(GroupYearDesc)
GroupYearDesc<-GroupYear%>%
arrange(Year,count)
GroupYearDesc<-GroupYear%>%
arrange(Year,desc(count))
write.csv(GroupYear,".\\GroupYearDesc.csv", row.names=FALSE)
write.csv(GroupYearDesc,".\\GroupYearDesc.csv", row.names=FALSE)
View(tibble_cat)
GroupStateYear<-tibble_cat%>%
group_by(Year,StateAbbr)%>%
summarise(count=n())
View(GroupStateYear)
GroupStateYear<-tibble_cat%>%
filter(Year!='2012')%>%
group_by(Year,StateAbbr)%>%
summarise(count=n())
View(GroupStateYear)
GroupStateYear<-tibble_cat%>%
filter(Year='2021')%>%
group_by(Month,StateAbbr)%>%
arrange(Month,desc(count))%>%
summarise(count=n())
GroupStateYear<-tibble_cat%>%
filter(Year=='2021')%>%
group_by(Month,StateAbbr)%>%
arrange(Month,desc(count))%>%
summarise(count=n())
View(GroupStateYear)
GroupStateYear<-tibble_cat%>%
filter(Year=='2021')%>%
group_by(Month,StateAbbr)%>%
summarise(count=n())
View(GroupStateYear)
GroupStateYear%>%group_by(StateAbbr)%>%
summarise(count=n())
StateCount<-GroupStateYear%>%group_by(StateAbbr)%>%
summarise(count=n())
View(StateCount)
GroupStateYear<-tibble_cat%>%
filter(Year=='2021')%>%
group_by(Month,StateAbbr)%>%
filter(StateAbbr!='PA')%>%
summarise(count=n())
write.csv(GroupStateYear,".\\GroupStateYear.csv", row.names=FALSE)
GroupStateYear<-GroupStateYear%>%
arrange(Month,desc(count))
View(GroupStateYear)
write.csv(GroupStateYear,".\\GroupStateYear.csv", row.names=FALSE)
View(GroupStateYear)
